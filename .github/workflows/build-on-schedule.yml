name: Scheduled Build

on:
  schedule:
    # Build weekly on Sundays at 3 AM UTC to ensure fresh base images
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  scheduled-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=weekly-{{date 'YYYY-MM-DD'}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          COMFYUI_VERSION=v0.3.47

    - name: Create release on version update
      if: github.event_name == 'schedule'
      run: |
        # Get current ComfyUI version
        COMFYUI_VERSION=$(grep 'COMFYUI_VERSION=v' Dockerfile | cut -d'=' -f2)
        
        # Check if this version already has a release
        if ! gh release view $COMFYUI_VERSION >/dev/null 2>&1; then
          echo "Creating release for $COMFYUI_VERSION"
          gh release create $COMFYUI_VERSION \
            --title "ComfyUI $COMFYUI_VERSION" \
            --notes "Automated release for ComfyUI $COMFYUI_VERSION

## Docker Image
\`\`\`bash
docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$COMFYUI_VERSION
\`\`\`

## RunPod Template
Use this image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$COMFYUI_VERSION\`" \
            --latest
        else
          echo "Release for $COMFYUI_VERSION already exists"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}